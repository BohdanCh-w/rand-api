// Code generated by MockGen. DO NOT EDIT.
// Source: rand_retriever.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entities "github.com/bohdanch-w/rand-api/entities"
	services "github.com/bohdanch-w/rand-api/services"
	gomock "github.com/golang/mock/gomock"
)

// MockRandParameters is a mock of RandParameters interface.
type MockRandParameters struct {
	ctrl     *gomock.Controller
	recorder *MockRandParametersMockRecorder
}

// MockRandParametersMockRecorder is the mock recorder for MockRandParameters.
type MockRandParametersMockRecorder struct {
	mock *MockRandParameters
}

// NewMockRandParameters creates a new mock instance.
func NewMockRandParameters(ctrl *gomock.Controller) *MockRandParameters {
	mock := &MockRandParameters{ctrl: ctrl}
	mock.recorder = &MockRandParametersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandParameters) EXPECT() *MockRandParametersMockRecorder {
	return m.recorder
}

// MockRandRetiever is a mock of RandRetiever interface.
type MockRandRetiever struct {
	ctrl     *gomock.Controller
	recorder *MockRandRetieverMockRecorder
}

// MockRandRetieverMockRecorder is the mock recorder for MockRandRetiever.
type MockRandRetieverMockRecorder struct {
	mock *MockRandRetiever
}

// NewMockRandRetiever creates a new mock instance.
func NewMockRandRetiever(ctrl *gomock.Controller) *MockRandRetiever {
	mock := &MockRandRetiever{ctrl: ctrl}
	mock.recorder = &MockRandRetieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandRetiever) EXPECT() *MockRandRetieverMockRecorder {
	return m.recorder
}

// ExecuteRequest mocks base method.
func (m *MockRandRetiever) ExecuteRequest(ctx context.Context, randReq *entities.RandomRequest) (entities.RandResponseResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteRequest", ctx, randReq)
	ret0, _ := ret[0].(entities.RandResponseResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteRequest indicates an expected call of ExecuteRequest.
func (mr *MockRandRetieverMockRecorder) ExecuteRequest(ctx, randReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteRequest", reflect.TypeOf((*MockRandRetiever)(nil).ExecuteRequest), ctx, randReq)
}

// GetUsage mocks base method.
func (m *MockRandRetiever) GetUsage(ctx context.Context, apiKey string) (entities.UsageStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsage", ctx, apiKey)
	ret0, _ := ret[0].(entities.UsageStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsage indicates an expected call of GetUsage.
func (mr *MockRandRetieverMockRecorder) GetUsage(ctx, apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsage", reflect.TypeOf((*MockRandRetiever)(nil).GetUsage), ctx, apiKey)
}

// NewRequest mocks base method.
func (m *MockRandRetiever) NewRequest(method string, params services.RandParameters) (entities.RandomRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest", method, params)
	ret0, _ := ret[0].(entities.RandomRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockRandRetieverMockRecorder) NewRequest(method, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockRandRetiever)(nil).NewRequest), method, params)
}
