// Code generated by MockGen. DO NOT EDIT.
// Source: output_processor.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entities "github.com/bohdanch-w/rand-api/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockOutputProcessor is a mock of OutputProcessor interface.
type MockOutputProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockOutputProcessorMockRecorder
}

// MockOutputProcessorMockRecorder is the mock recorder for MockOutputProcessor.
type MockOutputProcessorMockRecorder struct {
	mock *MockOutputProcessor
}

// NewMockOutputProcessor creates a new mock instance.
func NewMockOutputProcessor(ctrl *gomock.Controller) *MockOutputProcessor {
	mock := &MockOutputProcessor{ctrl: ctrl}
	mock.recorder = &MockOutputProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutputProcessor) EXPECT() *MockOutputProcessorMockRecorder {
	return m.recorder
}

// GenerateRandOutput mocks base method.
func (m *MockOutputProcessor) GenerateRandOutput(data []interface{}, apiInfo entities.APIInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandOutput", data, apiInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateRandOutput indicates an expected call of GenerateRandOutput.
func (mr *MockOutputProcessorMockRecorder) GenerateRandOutput(data, apiInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandOutput", reflect.TypeOf((*MockOutputProcessor)(nil).GenerateRandOutput), data, apiInfo)
}

// GenerateUsageOutput mocks base method.
func (m *MockOutputProcessor) GenerateUsageOutput(status entities.UsageStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUsageOutput", status)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateUsageOutput indicates an expected call of GenerateUsageOutput.
func (mr *MockOutputProcessorMockRecorder) GenerateUsageOutput(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUsageOutput", reflect.TypeOf((*MockOutputProcessor)(nil).GenerateUsageOutput), status)
}
